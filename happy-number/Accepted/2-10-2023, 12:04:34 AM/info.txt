{"id":895128321,"lang":"java","lang_name":"Java","time":"1 week, 4 days","timestamp":1676005474,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/895128321/","is_pending":"Not Pending","title":"Happy Number","memory":"39.5 MB","code":"class Solution {\n    public boolean isHappy(int n) {\n        if (n == 1){ \n            return true;\n        }\n        // the numbers we generate form an implicit LL so we can use floyd's detection algorithm to see if we have a cycle or not. and the test for if we have a cycle is if we ever reach 1 or if our ptrs match each other\n        int slowRunner = n;\n        int fastRunner = n;\n        do {\n            slowRunner = getNext(slowRunner);\n            fastRunner = getNext(getNext(fastRunner));\n        } while (slowRunner != fastRunner);\n        return slowRunner == 1;\n    }\n\n    public int getNext(int n) {\n        int totalSum = 0;\n        while (n > 0) {\n            int d = n % 10;\n            n = n / 10;\n            totalSum += d * d;\n        }\n        return totalSum;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"happy-number","has_notes":false}