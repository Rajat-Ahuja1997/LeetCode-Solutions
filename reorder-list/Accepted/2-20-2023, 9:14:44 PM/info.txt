{"id":901944169,"lang":"java","lang_name":"Java","time":"17 hours, 59 minutes","timestamp":1676945684,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/901944169/","is_pending":"Not Pending","title":"Reorder List","memory":"45.3 MB","code":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public void reorderList(ListNode head) {\n        ListNode mid = getMid(head);\n        ListNode secondHead = reverseList(mid);\n        ListNode firstHead = head;\n\n        while (firstHead != null && secondHead != null) {\n            ListNode temp = firstHead.next;\n            firstHead.next = secondHead;\n            firstHead = temp;\n            \n            temp = secondHead.next;\n            secondHead.next = firstHead;\n            secondHead = temp;\n        }\n\n        if (firstHead != null) {\n            firstHead.next = null;\n        }\n    }\n\n    ListNode getMid(ListNode head) {\n        ListNode slow = head, fast = head;\n        while (fast != null && fast.next != null) {\n            slow = slow.next;\n            fast = fast.next.next;\n        }\n        return slow;\n    }\n\n    ListNode reverseList(ListNode head) {\n        ListNode prev = null;\n        ListNode current = head;\n        while (current != null ){\n            ListNode next = current.next;\n            current.next = prev;\n            prev = current;\n            current = next;\n        }\n        return prev;\n    }\n\n\n}","compare_result":"111111111111","title_slug":"reorder-list","has_notes":false}