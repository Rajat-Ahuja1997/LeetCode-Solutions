{"id":901648666,"lang":"java","lang_name":"Java","time":"1 day, 4 hours","timestamp":1676908330,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/901648666/","is_pending":"Not Pending","title":"Reverse Linked List II","memory":"39.9 MB","code":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode reverseBetween(ListNode head, int left, int right) {\n        ListNode prev = null;\n        ListNode current = head;\n        while (left > 1) {\n            prev = current;\n            current = current.next;\n            left--;\n            right--; \n        }\n        // this points to the element that will point to the beginning of our reversed sublist\n        ListNode startConnector = prev;\n        // this points to the element that will point to the element after our reverse sublist\n        ListNode tailConnector = current;\n\n        // now we reverse\n        while (right > 0) {\n            ListNode next =current.next;\n            current.next = prev;\n            prev = current;\n            current = next;\n            right--;\n        }\n\n        if (startConnector != null) {\n            startConnector.next = prev;\n        } else {\n            head = prev;\n        }\n\n        tailConnector.next = current;\n        return head;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111","title_slug":"reverse-linked-list-ii","has_notes":false}