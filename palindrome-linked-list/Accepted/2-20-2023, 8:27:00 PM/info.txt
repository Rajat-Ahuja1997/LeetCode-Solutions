{"id":901925483,"lang":"java","lang_name":"Java","time":"18 hours, 47 minutes","timestamp":1676942820,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/901925483/","is_pending":"Not Pending","title":"Palindrome Linked List","memory":"58.9 MB","code":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public boolean isPalindrome(ListNode head) {\n        // find mid\n        ListNode mid = getMid(head);\n        // reverse second half of list\n        ListNode secondHead = reverseList(mid);\n        // compare the two lists and if any elements are different, this is not a palindrome\n        while (head != null && secondHead != null) {\n            if (head.val != secondHead.val) {\n                return false;\n            }\n            head = head.next;\n            secondHead = secondHead.next;\n        }\n        return true;   \n    }\n\n    ListNode getMid(ListNode head) {\n        ListNode slow = head, fast = head;\n        while (fast != null && fast.next != null) {\n            slow = slow.next;\n            fast = fast.next.next;\n        }\n        return slow;\n    }\n\n    ListNode reverseList(ListNode head) {\n        ListNode prev = null;\n        ListNode current = head;\n        while (current != null ){\n            ListNode next = current.next;\n            current.next = prev;\n            prev = current;\n            current = next;\n        }\n        return prev;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"palindrome-linked-list","has_notes":false}