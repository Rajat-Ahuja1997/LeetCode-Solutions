{"id":900560732,"lang":"java","lang_name":"Java","time":"3Â days","timestamp":1676751072,"status":10,"status_display":"Accepted","runtime":"10 ms","url":"/submissions/detail/900560732/","is_pending":"Not Pending","title":"Sort List","memory":"50.3 MB","code":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode sortList(ListNode head) {\n        // We need O(n log(n)) time so we can use merge sortList\n        if (head == null || head.next == null) {\n            return head;\n        }\n\n        ListNode mid = findMid(head);\n        ListNode left = sortList(head);\n        ListNode right = sortList(mid);\n        return merge(left, right);\n    }\n\n    ListNode merge(ListNode list1, ListNode list2) {\n        ListNode head = new ListNode(0);\n        ListNode current = head;\n        while (list1 != null && list2 != null) {\n            if (list1.val < list2.val) {\n                current.next = list1;\n                list1 = list1.next;\n                current = current.next;\n            } else {\n                current.next = list2;\n                list2 = list2.next;\n                current = current.next;\n            }\n        }\n        current.next = (list1 != null) ? list1 : list2;\n        return head.next;\n    }\n\n    ListNode findMid(ListNode head) {\n        ListNode midPrev = null;\n        while (head != null && head.next != null) {\n            midPrev = (midPrev == null) ? head : midPrev.next;\n            head = head.next.next;\n        }\n        ListNode mid = midPrev.next;\n        midPrev.next = null;\n        return mid;\n        // ListNode slow = head;\n        // ListNode fast = head;\n        // while (fast != null && fast.next != null) {\n        //     slow = slow.next;\n        //     fast = fast.next.next;\n        // }\n        // return slow;\n    }\n}","compare_result":"111111111111111111111111111111","title_slug":"sort-list","has_notes":false}