{"id":901998330,"lang":"java","lang_name":"Java","time":"15 hours, 54 minutes","timestamp":1676953186,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/901998330/","is_pending":"Not Pending","title":"Binary Tree Level Order Traversal","memory":"42.2 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<List<Integer>> levelOrder(TreeNode root) {\n        // for BFS we will use a queue to maintain the elements we need to visit. We go to each element int a queue, add it to an arraylist, add the children of this element to the queue, and then move on.@interface\n        List<List<Integer>> levels = new ArrayList<List<Integer>>();\n        Queue<TreeNode> queue = new LinkedList<TreeNode>();\n        if (root == null) {\n            return levels;\n        }\n        queue.add(root);\n        int level = 0;\n        while (!queue.isEmpty()) {\n            levels.add(new ArrayList<Integer>());\n            // find otu the number of elementsi n this level, this is our queue size.\n            int level_length = queue.size();\n            for (int i = 0; i < level_length; i++) {\n                TreeNode node = queue.remove();\n                levels.get(level).add(node.val);\n                if (node.left != null) {\n                    queue.add(node.left);\n                }\n                if (node.right != null) {\n                    queue.add(node.right);\n                }\n            }\n            level++;\n        }\n        return levels;\n    }\n}","compare_result":"1111111111111111111111111111111111","title_slug":"binary-tree-level-order-traversal","has_notes":false}