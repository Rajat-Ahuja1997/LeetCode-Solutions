{"id":898860530,"lang":"java","lang_name":"Java","time":"5 days, 17 hours","timestamp":1676515159,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/898860530/","is_pending":"Not Pending","title":"Find First and Last Position of Element in Sorted Array","memory":"45.4 MB","code":"class Solution {\n    public int[] searchRange(int[] nums, int target) {\n        int[] result = {-1, -1};\n        int firstPosition = search(nums, target, true);\n        int endPosition = search(nums, target, false);\n\n        result[0] = firstPosition;\n        result[1] = endPosition;\n        return result;\n    }\n\n    // we use a helper method to run the binary search twice. first we run it to find the earlier position of a number. then we use it to find hthe\n    private int search(int[] nums, int target, boolean findStartIndex) {\n        int answer = -1;;\n        int start = 0;\n        int end = nums.length - 1;\n        while (start <= end) {\n            int mid = (start + end) / 2;\n            if (target > nums[mid]) {\n                start = mid + 1;\n            } else if (target < nums[mid]) {\n                end = mid - 1;\n            } else {\n                // potential answer found;\n                answer = mid;\n                // if we are searching for the first position then it is possible there are even earlier target numbers to the left. so we make the end = mid + 1. \n                if (findStartIndex) {\n                    end = mid - 1;\n                } else {\n                    // if we are searching for the end position then it is possible there are later target number to the right. so we make the start = mid + 1; \n                    start = mid + 1;\n                }\n            }\n        }\n        return answer;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-first-and-last-position-of-element-in-sorted-array","has_notes":false}