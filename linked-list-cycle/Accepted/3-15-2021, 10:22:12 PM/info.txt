{"id":468331097,"lang":"java","lang_name":"Java","time":"1 year, 11 months","timestamp":1615861332,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/468331097/","is_pending":"Not Pending","title":"Linked List Cycle","memory":"39.9 MB","code":"/**\n * Definition for singly-linked list.\n * class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) {\n *         val = x;\n *         next = null;\n *     }\n * }\n */\npublic class Solution {\n    public boolean hasCycle(ListNode head) {\n        if (head == null) {\n            return false;\n        }\n        \n        ListNode slow = head;\n        ListNode fast = head.next; //because if they both equal head then fast == flow\n        \n        while (slow != fast) {\n            if (fast == null || fast.next == null) {\n                return false;\n            }\n            slow = slow.next;\n            fast = fast.next.next; \n        }\n        return true;\n    }\n}","compare_result":"1111111111111111111","title_slug":"linked-list-cycle","has_notes":false}