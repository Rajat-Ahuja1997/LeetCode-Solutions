{"id":902456577,"lang":"java","lang_name":"Java","time":"1 hour, 31 minutes","timestamp":1677004969,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/902456577/","is_pending":"Not Pending","title":"Binary Tree Right Side View","memory":"43.1 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<Integer> rightSideView(TreeNode root) {\n        List<Integer> nodes = new ArrayList<>();\n        Queue<TreeNode> queue = new LinkedList<TreeNode>();\n        if (root == null) {\n            return nodes;\n        }\n        queue.add(root);\n        while (!queue.isEmpty()) {\n            int level_length = queue.size();\n            for (int i = 0; i < level_length; i++) {\n                TreeNode node = queue.remove();\n                if (i == level_length - 1) {\n                    nodes.add(node.val);\n                }\n                if (node.left != null) {\n                    queue.add(node.left);\n                }\n                if (node.right != null) {\n                    queue.add(node.right);\n                }\n            }            \n        }\n        return nodes;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-right-side-view","has_notes":false}