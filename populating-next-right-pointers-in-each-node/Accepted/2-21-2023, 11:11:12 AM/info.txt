{"id":902354803,"lang":"java","lang_name":"Java","time":"4 hours, 3 minutes","timestamp":1676995872,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/902354803/","is_pending":"Not Pending","title":"Populating Next Right Pointers in Each Node","memory":"48.3 MB","code":"/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public Node left;\n    public Node right;\n    public Node next;\n\n    public Node() {}\n    \n    public Node(int _val) {\n        val = _val;\n    }\n\n    public Node(int _val, Node _left, Node _right, Node _next) {\n        val = _val;\n        left = _left;\n        right = _right;\n        next = _next;\n    }\n};\n*/\n\nclass Solution {\n    public Node connect(Node root) {\n        if (root == null) {\n            return root;\n        }\n        // we use the leftmost node at each level as our anchor for traversing downwards\n        Node leftMost = root;\n        while (leftMost.left != null) {\n            // we use head as our anchor for traversing left --> right\n            Node head = leftMost;\n            while (head != null) {\n                head.left.next = head.right;\n                if (head.next != null) {\n                    head.right.next = head.next.left;\n                }\n                head = head.next;\n            }\n            leftMost = leftMost.left;\n        }\n        return root;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111","title_slug":"populating-next-right-pointers-in-each-node","has_notes":false}