{"id":901608092,"lang":"java","lang_name":"Java","time":"1 day, 5 hours","timestamp":1676904017,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/901608092/","is_pending":"Not Pending","title":"Minimum Size Subarray Sum","memory":"50.1 MB","code":"class Solution {\n    public int minSubArrayLen(int target, int[] nums) {\n        int windowStart = 0;\n        int minWindowSize = Integer.MAX_VALUE;\n        int currentWindowSum = 0;\n        for (int windowEnd = 0; windowEnd < nums.length; windowEnd++) {\n            currentWindowSum += nums[windowEnd];\n\n            while (currentWindowSum >= target) {\n                minWindowSize = Math.min(minWindowSize, windowEnd - windowStart + 1);\n                currentWindowSum -= nums[windowStart];\n                windowStart++;\n            }\n        }\n        return minWindowSize == Integer.MAX_VALUE ? 0 : minWindowSize;        \n    }\n}","compare_result":"11111111111111111111","title_slug":"minimum-size-subarray-sum","has_notes":false}