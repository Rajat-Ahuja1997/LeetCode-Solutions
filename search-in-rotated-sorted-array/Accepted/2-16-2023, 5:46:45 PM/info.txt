{"id":899411467,"lang":"java","lang_name":"Java","time":"4 days, 21 hours","timestamp":1676587605,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/899411467/","is_pending":"Not Pending","title":"Search in Rotated Sorted Array","memory":"42.1 MB","code":"class Solution {\n    public int search(int[] nums, int target) {\n        // we find the peak and then do two binary searches, this time ascending.\n        int pivot = findPeak(nums);\n        int firstTry = binarySearch(nums, target, 0, pivot);\n        if (firstTry != -1) {\n            return firstTry;\n        }\n        return binarySearch(nums, target, pivot + 1, nums.length - 1);\n    }\n\n    private int findPeak(int[] nums) {\n        int start = 0;\n        int end = nums.length - 1;\n        while (start <= end) {\n            int mid = start + (end - start) / 2;\n            if (mid < end && nums[mid] > nums[mid + 1]) {\n                return mid;\n            } else if (mid > start && nums[mid] < nums[mid - 1]){\n                return mid - 1;\n            } else if (nums[mid] <= nums[start]) {\n                end = mid - 1;\n            } else {\n                start = mid + 1;\n            }\n        }\n        return -1;\n    }\n\n    private int binarySearch(int[] nums, int target, int start, int end) {\n        while (start <= end) {\n            int mid = start + (end - start) / 2;\n            if (nums[mid] > target) {\n                end = mid - 1;\n            } else if (nums[mid] < target) {\n                start = mid + 1;\n            } else {\n                return mid;\n            }\n        }\n        return -1;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"search-in-rotated-sorted-array","has_notes":false}